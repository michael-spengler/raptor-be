{
    "sourceFile": "app.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1642500185400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642500196623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n import { opine } from \"https://deno.land/x/opine@2.1.1/mod.ts\";\n import { TrailService } from \"./TrailService.ts\";\n import trails from \"./db.ts\";\n-import removeUndefined from \".helpers/removeUndefined.ts\";\n+import removeUndefined from \"./helpers/removeUndefined.ts\";\n \n const port = 3000;\n \n const app = opine();\n"
                },
                {
                    "date": 1642500359075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n     let searchQuery = trailService.findACoolTrail({ \n         trailId: req.query.trailid, \n         length: req.query.length, \n         title: req.query.title, \n+        rating: req.query.rating,\n         coordinates: req.query.coordinates });\n     searchQuery = removeUndefined(searchQuery);\n     console.log(searchQuery);\n     res.send(await trails.find({}, {noCursorTimeout: false }).toArray());\n"
                },
                {
                    "date": 1642579062747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,15 +19,15 @@\n });\n \n app.get(\"/search\", async function (req, res) {\n     const trailService = new TrailService();\n-    let searchQuery = trailService.findACoolTrail({ \n+    let searchParameters = trailService.findACoolTrail({ \n         trailId: req.query.trailid, \n         length: req.query.length, \n         title: req.query.title, \n         rating: req.query.rating,\n         coordinates: req.query.coordinates });\n-    searchQuery = removeUndefined(searchQuery);\n+    let searchQuery = JSON.stringify(searchParameters);\n     console.log(searchQuery);\n     res.send(await trails.find({}, {noCursorTimeout: false }).toArray());\n     /* result \n     { trailId: undefined, length: \"2500\", title: undefined, coordinates: undefined }\n"
                },
                {
                    "date": 1642579152868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         rating: req.query.rating,\n         coordinates: req.query.coordinates });\n     let searchQuery = JSON.stringify(searchParameters);\n     console.log(searchQuery);\n-    res.send(await trails.find({}, {noCursorTimeout: false }).toArray());\n+    res.send(await trails.find({searchQuery}, {noCursorTimeout: false }).toArray());\n     /* result \n     { trailId: undefined, length: \"2500\", title: undefined, coordinates: undefined }\n     mongo doesn't accept the undefined values\n     TODO: maybe write a function to reformat the string\n"
                },
                {
                    "date": 1642579632091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         rating: req.query.rating,\n         coordinates: req.query.coordinates });\n     let searchQuery = JSON.stringify(searchParameters);\n     console.log(searchQuery);\n-    res.send(await trails.find({searchQuery}, {noCursorTimeout: false }).toArray());\n+    res.send(await trails.find({searchQuery}, {noCursorTimeout: false }));\n     /* result \n     { trailId: undefined, length: \"2500\", title: undefined, coordinates: undefined }\n     mongo doesn't accept the undefined values\n     TODO: maybe write a function to reformat the string\n"
                },
                {
                    "date": 1642581309115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,21 +4,45 @@\n import { opine } from \"https://deno.land/x/opine@2.1.1/mod.ts\";\n import { TrailService } from \"./TrailService.ts\";\n import trails from \"./db.ts\";\n import removeUndefined from \"./helpers/removeUndefined.ts\";\n+import { Bson } from \"https://deno.land/x/bson/mod.ts\";\n \n const port = 3000;\n \n const app = opine();\n \n+app.get(\"/trailid/:trailid\", async function ({\n+    req,\n+    res,\n+}: {\n+    req: { id: string };\n+    res: any;\n+}) : Promise<void> {\n+\n+    console.log(\"Das ist req\", req);\n+    console.log(\"Das ist req.id\", req.id);\n+    const trail = await trails.find({ \"_id\": new Bson.ObjectID(req.id) }, { noCursorTimeout: false }).toArray();\n+\n+    if(trail) {\n+        res.status = 200;\n+        res.body = {\n+            success: true,\n+            data: trail,\n+        };\n+    } else {\n+        res.status = 404;\n+        res.body = {\n+            success: false,\n+            msg: \"No trail found\",\n+        };\n+    }\n+});\n+\n app.get(\"/alltrails\", async function (req, res) {\n     res.send(await trails.find({}, { noCursorTimeout: false }).toArray())\n });\n \n-app.get(\"/trailid/:trailid\", function (req, res) {\n-    res.send(`trailid lautet: ${req.params.trailid}`);\n-});\n-\n app.get(\"/search\", async function (req, res) {\n     const trailService = new TrailService();\n     let searchParameters = trailService.findACoolTrail({ \n         trailId: req.query.trailid, \n@@ -29,45 +53,62 @@\n     let searchQuery = JSON.stringify(searchParameters);\n     console.log(searchQuery);\n     res.send(await trails.find({searchQuery}, {noCursorTimeout: false }));\n     /* result \n-    { trailId: undefined, length: \"2500\", title: undefined, coordinates: undefined }\n-    mongo doesn't accept the undefined values\n-    TODO: maybe write a function to reformat the string\n+    correct string is passed, but is not correctly formatted for search in Mongo\n     */\n });\n \n-app.set(\"/addTrail\", async function addTrail({\n+app.set(\"/addTrail\", async ({\n     req, res,\n-}: {\n-    req: any;\n-    res: any;\n-}): Promise<void> {\n+  }: {\n+    req: any; res: any;\n+  }): Promise<void> => {\n     try {\n-        if (!req.hasBody) {\n-            res.status = 400;\n-            res.body = {\n-                success: false,\n-                msg: \"No Data\",\n-            };\n-        } else {\n-            const body = await req.body();\n-            const trail = await body.value;\n-            await trails.insertOne(trail);\n-            res.status = 201;\n-            res.body = {\n-                success: true,\n-                data: trail,\n-            };\n-        }\n-    } catch (err) {\n+      if(!req.hasBody) {\n+        res.status = 400;\n         res.body = {\n-            success: false,\n-            msg: err.toString(),\n+          success: false,\n+          msg: \"No Data\",\n         };\n+      } else {\n+        const body = await req.body();\n+        const trail = await body.value;\n+        await trails.insertOne(trail);\n+        res.status = 201;\n+        res.body = {\n+          success: true,\n+          data: trail,\n+        };\n+      }\n+    } catch(err) {\n+      res.body = {\n+        success: false,\n+        msg: err.toString(),\n+      };\n     }\n-});\n+  });\n \n+app.delete(\"/deleteTrail\", async function({\n+    req, res\n+  }: {\n+    req: { id: string; }; res: any;\n+  }): Promise<void> {\n+    try {\n+      await trails.deleteOne({ $oid: req.id });\n+      res.status = 201;\n+      res.body = {\n+        success: true,\n+        msg: \"Trail deleted\",\n+      };\n+    } catch(err) {\n+      res.body = {\n+        success: false,\n+        msg: err.toString(),\n+      };\n+    }\n+  });\n+\n app.listen(\n     port,\n     () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n );\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642582059980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,20 @@\n import { TrailService } from \"./TrailService.ts\";\n import trails from \"./db.ts\";\n import removeUndefined from \"./helpers/removeUndefined.ts\";\n import { Bson } from \"https://deno.land/x/bson/mod.ts\";\n+// for heroku\n+import { serve } from \"https://deno.land/std@0.57.0/http/server.ts\";\n+import { parse } from 'https://deno.land/std/flags/mod.ts';\n \n-const port = 3000;\n+const { args } = Deno;\n+const DEFAULT_PORT = 3000;\n \n+const argPort = parse(args).port;\n+\n+const s = serve({ port: argPort ? Number(argPort) : DEFAULT_PORT });\n+\n+\n const app = opine();\n \n app.get(\"/trailid/:trailid\", async function ({\n     req,\n@@ -108,7 +117,11 @@\n     }\n   });\n \n app.listen(\n-    port,\n-    () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n-);\n\\ No newline at end of file\n+    argPort,\n+    () => console.log(`Server has started on http://localhost:${argPort} ðŸš€`),\n+);\n+\n+for await (const req of s) {\n+  req.respond({ body: \"Hello World\\n\" });\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642689364312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,8 @@\n const DEFAULT_PORT = 3000;\n \n const argPort = parse(args).port;\n \n-const s = serve({ port: argPort ? Number(argPort) : DEFAULT_PORT });\n-\n-\n const app = opine();\n \n app.get(\"/trailid/:trailid\", async function ({\n     req,\n@@ -117,11 +114,7 @@\n     }\n   });\n \n app.listen(\n-    argPort,\n+    {port: argPort ?? DEFAULT_PORT},\n     () => console.log(`Server has started on http://localhost:${argPort} ðŸš€`),\n-);\n-\n-for await (const req of s) {\n-  req.respond({ body: \"Hello World\\n\" });\n\\ No newline at end of file\n-}\n+);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642780892381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,66 +12,69 @@\n \n const { args } = Deno;\n const DEFAULT_PORT = 3000;\n \n-const argPort = parse(args).port;\n+const port = parseInt(Deno.env.get('PORT') ?? '8000');\n+const s = serve({ port });\n \n const app = opine();\n \n-app.get(\"/trailid/:trailid\", async function ({\n+for await (const req of s) {\n+  app.get(\"/trailid/:trailid\", async function ({\n     req,\n     res,\n-}: {\n+  }: {\n     req: { id: string };\n     res: any;\n-}) : Promise<void> {\n+  }): Promise<void> {\n \n     console.log(\"Das ist req\", req);\n     console.log(\"Das ist req.id\", req.id);\n     const trail = await trails.find({ \"_id\": new Bson.ObjectID(req.id) }, { noCursorTimeout: false }).toArray();\n \n-    if(trail) {\n-        res.status = 200;\n-        res.body = {\n-            success: true,\n-            data: trail,\n-        };\n+    if (trail) {\n+      res.status = 200;\n+      res.body = {\n+        success: true,\n+        data: trail,\n+      };\n     } else {\n-        res.status = 404;\n-        res.body = {\n-            success: false,\n-            msg: \"No trail found\",\n-        };\n+      res.status = 404;\n+      res.body = {\n+        success: false,\n+        msg: \"No trail found\",\n+      };\n     }\n-});\n+  });\n \n-app.get(\"/alltrails\", async function (req, res) {\n+  app.get(\"/alltrails\", async function (req, res) {\n     res.send(await trails.find({}, { noCursorTimeout: false }).toArray())\n-});\n+  });\n \n-app.get(\"/search\", async function (req, res) {\n+  app.get(\"/search\", async function (req, res) {\n     const trailService = new TrailService();\n-    let searchParameters = trailService.findACoolTrail({ \n-        trailId: req.query.trailid, \n-        length: req.query.length, \n-        title: req.query.title, \n-        rating: req.query.rating,\n-        coordinates: req.query.coordinates });\n+    let searchParameters = trailService.findACoolTrail({\n+      trailId: req.query.trailid,\n+      length: req.query.length,\n+      title: req.query.title,\n+      rating: req.query.rating,\n+      coordinates: req.query.coordinates\n+    });\n     let searchQuery = JSON.stringify(searchParameters);\n     console.log(searchQuery);\n-    res.send(await trails.find({searchQuery}, {noCursorTimeout: false }));\n+    res.send(await trails.find({ searchQuery }, { noCursorTimeout: false }));\n     /* result \n     correct string is passed, but is not correctly formatted for search in Mongo\n     */\n-});\n+  });\n \n-app.set(\"/addTrail\", async ({\n+  app.set(\"/addTrail\", async ({\n     req, res,\n   }: {\n     req: any; res: any;\n   }): Promise<void> => {\n     try {\n-      if(!req.hasBody) {\n+      if (!req.hasBody) {\n         res.status = 400;\n         res.body = {\n           success: false,\n           msg: \"No Data\",\n@@ -85,17 +88,17 @@\n           success: true,\n           data: trail,\n         };\n       }\n-    } catch(err) {\n+    } catch (err) {\n       res.body = {\n         success: false,\n         msg: err.toString(),\n       };\n     }\n   });\n \n-app.delete(\"/deleteTrail\", async function({\n+  app.delete(\"/deleteTrail\", async function ({\n     req, res\n   }: {\n     req: { id: string; }; res: any;\n   }): Promise<void> {\n@@ -105,16 +108,18 @@\n       res.body = {\n         success: true,\n         msg: \"Trail deleted\",\n       };\n-    } catch(err) {\n+    } catch (err) {\n       res.body = {\n         success: false,\n         msg: err.toString(),\n       };\n     }\n   });\n \n-app.listen(\n-    {port: argPort ?? DEFAULT_PORT},\n+  app.listen(\n\\ No newline at end of file\n+    { port: argPort ?? DEFAULT_PORT },\n     () => console.log(`Server has started on http://localhost:${argPort} ðŸš€`),\n-);\n+  );\n+}\n+\n"
                },
                {
                    "date": 1642780908355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,8 +117,9 @@\n     }\n   });\n \n   app.listen(\n-    { port: argPort ?? DEFAULT_PORT },\n-    () => console.log(`Server has started on http://localhost:${argPort} ðŸš€`),\n+    { port: port ?? DEFAULT_PORT },\n+    () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n\\ No newline at end of file\n   );\n-}\n+}\n+\n"
                },
                {
                    "date": 1642780988188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,16 @@\n \n const app = opine();\n \n for await (const req of s) {\n+\n+  req.respond({\n+    body: '<h1>raptor trails backend</h1>' +\n+      '<p>&star; This is a Deno server and runs now (finally) &star;</p>' +\n+      '<img src=\"https://deno.land/logo.svg\" width=\"150\" height=\"150\">',\n+    headers: new Headers({ 'Content-Type': 'text/html' }),\n+  });\n+\n   app.get(\"/trailid/:trailid\", async function ({\n     req,\n     res,\n   }: {\n@@ -120,5 +128,6 @@\n   app.listen(\n     { port: port ?? DEFAULT_PORT },\n     () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n   );\n-}\n\\ No newline at end of file\n+}\n+\n"
                },
                {
                    "date": 1642781191042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,10 +124,10 @@\n       };\n     }\n   });\n \n-  app.listen(\n-    { port: port ?? DEFAULT_PORT },\n-    () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n-  );\n+  // app.listen(\n+  //   { port: port ?? DEFAULT_PORT },\n+  //   () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n+  // );\n }\n \n"
                },
                {
                    "date": 1642781205883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,105 +26,105 @@\n       '<img src=\"https://deno.land/logo.svg\" width=\"150\" height=\"150\">',\n     headers: new Headers({ 'Content-Type': 'text/html' }),\n   });\n \n-  app.get(\"/trailid/:trailid\", async function ({\n-    req,\n-    res,\n-  }: {\n-    req: { id: string };\n-    res: any;\n-  }): Promise<void> {\n+  // app.get(\"/trailid/:trailid\", async function ({\n+  //   req,\n+  //   res,\n+  // }: {\n+  //   req: { id: string };\n+  //   res: any;\n+  // }): Promise<void> {\n \n-    console.log(\"Das ist req\", req);\n-    console.log(\"Das ist req.id\", req.id);\n-    const trail = await trails.find({ \"_id\": new Bson.ObjectID(req.id) }, { noCursorTimeout: false }).toArray();\n+  //   console.log(\"Das ist req\", req);\n+  //   console.log(\"Das ist req.id\", req.id);\n+  //   const trail = await trails.find({ \"_id\": new Bson.ObjectID(req.id) }, { noCursorTimeout: false }).toArray();\n \n-    if (trail) {\n-      res.status = 200;\n-      res.body = {\n-        success: true,\n-        data: trail,\n-      };\n-    } else {\n-      res.status = 404;\n-      res.body = {\n-        success: false,\n-        msg: \"No trail found\",\n-      };\n-    }\n-  });\n+  //   if (trail) {\n+  //     res.status = 200;\n+  //     res.body = {\n+  //       success: true,\n+  //       data: trail,\n+  //     };\n+  //   } else {\n+  //     res.status = 404;\n+  //     res.body = {\n+  //       success: false,\n+  //       msg: \"No trail found\",\n+  //     };\n+  //   }\n+  // });\n \n-  app.get(\"/alltrails\", async function (req, res) {\n-    res.send(await trails.find({}, { noCursorTimeout: false }).toArray())\n-  });\n+  // app.get(\"/alltrails\", async function (req, res) {\n+  //   res.send(await trails.find({}, { noCursorTimeout: false }).toArray())\n+  // });\n \n-  app.get(\"/search\", async function (req, res) {\n-    const trailService = new TrailService();\n-    let searchParameters = trailService.findACoolTrail({\n-      trailId: req.query.trailid,\n-      length: req.query.length,\n-      title: req.query.title,\n-      rating: req.query.rating,\n-      coordinates: req.query.coordinates\n-    });\n-    let searchQuery = JSON.stringify(searchParameters);\n-    console.log(searchQuery);\n-    res.send(await trails.find({ searchQuery }, { noCursorTimeout: false }));\n-    /* result \n-    correct string is passed, but is not correctly formatted for search in Mongo\n-    */\n-  });\n+  // app.get(\"/search\", async function (req, res) {\n+  //   const trailService = new TrailService();\n+  //   let searchParameters = trailService.findACoolTrail({\n+  //     trailId: req.query.trailid,\n+  //     length: req.query.length,\n+  //     title: req.query.title,\n+  //     rating: req.query.rating,\n+  //     coordinates: req.query.coordinates\n+  //   });\n+  //   let searchQuery = JSON.stringify(searchParameters);\n+  //   console.log(searchQuery);\n+  //   res.send(await trails.find({ searchQuery }, { noCursorTimeout: false }));\n+  //   /* result \n+  //   correct string is passed, but is not correctly formatted for search in Mongo\n+  //   */\n+  // });\n \n-  app.set(\"/addTrail\", async ({\n-    req, res,\n-  }: {\n-    req: any; res: any;\n-  }): Promise<void> => {\n-    try {\n-      if (!req.hasBody) {\n-        res.status = 400;\n-        res.body = {\n-          success: false,\n-          msg: \"No Data\",\n-        };\n-      } else {\n-        const body = await req.body();\n-        const trail = await body.value;\n-        await trails.insertOne(trail);\n-        res.status = 201;\n-        res.body = {\n-          success: true,\n-          data: trail,\n-        };\n-      }\n-    } catch (err) {\n-      res.body = {\n-        success: false,\n-        msg: err.toString(),\n-      };\n-    }\n-  });\n+  // app.set(\"/addTrail\", async ({\n+  //   req, res,\n+  // }: {\n+  //   req: any; res: any;\n+  // }): Promise<void> => {\n+  //   try {\n+  //     if (!req.hasBody) {\n+  //       res.status = 400;\n+  //       res.body = {\n+  //         success: false,\n+  //         msg: \"No Data\",\n+  //       };\n+  //     } else {\n+  //       const body = await req.body();\n+  //       const trail = await body.value;\n+  //       await trails.insertOne(trail);\n+  //       res.status = 201;\n+  //       res.body = {\n+  //         success: true,\n+  //         data: trail,\n+  //       };\n+  //     }\n+  //   } catch (err) {\n+  //     res.body = {\n+  //       success: false,\n+  //       msg: err.toString(),\n+  //     };\n+  //   }\n+  // });\n \n-  app.delete(\"/deleteTrail\", async function ({\n-    req, res\n-  }: {\n-    req: { id: string; }; res: any;\n-  }): Promise<void> {\n-    try {\n-      await trails.deleteOne({ $oid: req.id });\n-      res.status = 201;\n-      res.body = {\n-        success: true,\n-        msg: \"Trail deleted\",\n-      };\n-    } catch (err) {\n-      res.body = {\n-        success: false,\n-        msg: err.toString(),\n-      };\n-    }\n-  });\n+  // app.delete(\"/deleteTrail\", async function ({\n+  //   req, res\n+  // }: {\n+  //   req: { id: string; }; res: any;\n+  // }): Promise<void> {\n+  //   try {\n+  //     await trails.deleteOne({ $oid: req.id });\n+  //     res.status = 201;\n+  //     res.body = {\n+  //       success: true,\n+  //       msg: \"Trail deleted\",\n+  //     };\n+  //   } catch (err) {\n+  //     res.body = {\n+  //       success: false,\n+  //       msg: err.toString(),\n+  //     };\n+  //   }\n+  // });\n \n   // app.listen(\n   //   { port: port ?? DEFAULT_PORT },\n   //   () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n"
                },
                {
                    "date": 1642781250474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \n const { args } = Deno;\n const DEFAULT_PORT = 3000;\n \n-const port = parseInt(Deno.env.get('PORT') ?? '8000');\n+const port = parseInt(Deno.env.get('PORT') ?? 'DEFAULT_PORT' );\n const s = serve({ port });\n \n const app = opine();\n \n"
                },
                {
                    "date": 1642781775168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import trails from \"./db.ts\";\n import removeUndefined from \"./helpers/removeUndefined.ts\";\n import { Bson } from \"https://deno.land/x/bson/mod.ts\";\n // for heroku\n-import { serve } from \"https://deno.land/std@0.57.0/http/server.ts\";\n+import { serve } from \"https://deno.land/std@0.122.0/http/server.ts\";\n import { parse } from 'https://deno.land/std/flags/mod.ts';\n \n const { args } = Deno;\n const DEFAULT_PORT = 3000;\n"
                },
                {
                    "date": 1642841076517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n \n const { args } = Deno;\n const DEFAULT_PORT = 3000;\n \n-const port = parseInt(Deno.env.get('PORT') ?? 'DEFAULT_PORT' );\n-const s = serve({ port });\n+const port = parse(args).port;\n+// const s = serve({port});\n \n const app = opine();\n \n for await (const req of s) {\n@@ -124,10 +124,10 @@\n   //     };\n   //   }\n   // });\n \n-  // app.listen(\n-  //   { port: port ?? DEFAULT_PORT },\n-  //   () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n-  // );\n+  app.listen(\n+    { port: port ?? DEFAULT_PORT },\n+    () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n+  );\n }\n \n"
                },
                {
                    "date": 1642841696978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,121 +13,116 @@\n const { args } = Deno;\n const DEFAULT_PORT = 3000;\n \n const port = parse(args).port;\n-// const s = serve({port});\n \n const app = opine();\n \n-for await (const req of s) {\n \n-  req.respond({\n-    body: '<h1>raptor trails backend</h1>' +\n-      '<p>&star; This is a Deno server and runs now (finally) &star;</p>' +\n-      '<img src=\"https://deno.land/logo.svg\" width=\"150\" height=\"150\">',\n-    headers: new Headers({ 'Content-Type': 'text/html' }),\n-  });\n+app.get(\"/welcome\", async function welcome(req, res) {\n+   res.send(\"Hello from the raptor-trails backend\")  \n+});\n \n-  // app.get(\"/trailid/:trailid\", async function ({\n-  //   req,\n-  //   res,\n-  // }: {\n-  //   req: { id: string };\n-  //   res: any;\n-  // }): Promise<void> {\n+// app.get(\"/trailid/:trailid\", async function ({\n+//   req,\n+//   res,\n+// }: {\n+//   req: { id: string };\n+//   res: any;\n+// }): Promise<void> {\n \n-  //   console.log(\"Das ist req\", req);\n-  //   console.log(\"Das ist req.id\", req.id);\n-  //   const trail = await trails.find({ \"_id\": new Bson.ObjectID(req.id) }, { noCursorTimeout: false }).toArray();\n+//   console.log(\"Das ist req\", req);\n+//   console.log(\"Das ist req.id\", req.id);\n+//   const trail = await trails.find({ \"_id\": new Bson.ObjectID(req.id) }, { noCursorTimeout: false }).toArray();\n \n-  //   if (trail) {\n-  //     res.status = 200;\n-  //     res.body = {\n-  //       success: true,\n-  //       data: trail,\n-  //     };\n-  //   } else {\n-  //     res.status = 404;\n-  //     res.body = {\n-  //       success: false,\n-  //       msg: \"No trail found\",\n-  //     };\n-  //   }\n-  // });\n+//   if (trail) {\n+//     res.status = 200;\n+//     res.body = {\n+//       success: true,\n+//       data: trail,\n+//     };\n+//   } else {\n+//     res.status = 404;\n+//     res.body = {\n+//       success: false,\n+//       msg: \"No trail found\",\n+//     };\n+//   }\n+// });\n \n-  // app.get(\"/alltrails\", async function (req, res) {\n-  //   res.send(await trails.find({}, { noCursorTimeout: false }).toArray())\n-  // });\n+// app.get(\"/alltrails\", async function (req, res) {\n+//   res.send(await trails.find({}, { noCursorTimeout: false }).toArray())\n+// });\n \n-  // app.get(\"/search\", async function (req, res) {\n-  //   const trailService = new TrailService();\n-  //   let searchParameters = trailService.findACoolTrail({\n-  //     trailId: req.query.trailid,\n-  //     length: req.query.length,\n-  //     title: req.query.title,\n-  //     rating: req.query.rating,\n-  //     coordinates: req.query.coordinates\n-  //   });\n-  //   let searchQuery = JSON.stringify(searchParameters);\n-  //   console.log(searchQuery);\n-  //   res.send(await trails.find({ searchQuery }, { noCursorTimeout: false }));\n-  //   /* result \n-  //   correct string is passed, but is not correctly formatted for search in Mongo\n-  //   */\n-  // });\n+// app.get(\"/search\", async function (req, res) {\n+//   const trailService = new TrailService();\n+//   let searchParameters = trailService.findACoolTrail({\n+//     trailId: req.query.trailid,\n+//     length: req.query.length,\n+//     title: req.query.title,\n+//     rating: req.query.rating,\n+//     coordinates: req.query.coordinates\n+//   });\n+//   let searchQuery = JSON.stringify(searchParameters);\n+//   console.log(searchQuery);\n+//   res.send(await trails.find({ searchQuery }, { noCursorTimeout: false }));\n+//   /* result \n+//   correct string is passed, but is not correctly formatted for search in Mongo\n+//   */\n+// });\n \n-  // app.set(\"/addTrail\", async ({\n-  //   req, res,\n-  // }: {\n-  //   req: any; res: any;\n-  // }): Promise<void> => {\n-  //   try {\n-  //     if (!req.hasBody) {\n-  //       res.status = 400;\n-  //       res.body = {\n-  //         success: false,\n-  //         msg: \"No Data\",\n-  //       };\n-  //     } else {\n-  //       const body = await req.body();\n-  //       const trail = await body.value;\n-  //       await trails.insertOne(trail);\n-  //       res.status = 201;\n-  //       res.body = {\n-  //         success: true,\n-  //         data: trail,\n-  //       };\n-  //     }\n-  //   } catch (err) {\n-  //     res.body = {\n-  //       success: false,\n-  //       msg: err.toString(),\n-  //     };\n-  //   }\n-  // });\n+// app.set(\"/addTrail\", async ({\n+//   req, res,\n+// }: {\n+//   req: any; res: any;\n+// }): Promise<void> => {\n+//   try {\n+//     if (!req.hasBody) {\n+//       res.status = 400;\n+//       res.body = {\n+//         success: false,\n+//         msg: \"No Data\",\n+//       };\n+//     } else {\n+//       const body = await req.body();\n+//       const trail = await body.value;\n+//       await trails.insertOne(trail);\n+//       res.status = 201;\n+//       res.body = {\n+//         success: true,\n+//         data: trail,\n+//       };\n+//     }\n+//   } catch (err) {\n+//     res.body = {\n+//       success: false,\n+//       msg: err.toString(),\n+//     };\n+//   }\n+// });\n \n-  // app.delete(\"/deleteTrail\", async function ({\n-  //   req, res\n-  // }: {\n-  //   req: { id: string; }; res: any;\n-  // }): Promise<void> {\n-  //   try {\n-  //     await trails.deleteOne({ $oid: req.id });\n-  //     res.status = 201;\n-  //     res.body = {\n-  //       success: true,\n-  //       msg: \"Trail deleted\",\n-  //     };\n-  //   } catch (err) {\n-  //     res.body = {\n-  //       success: false,\n-  //       msg: err.toString(),\n-  //     };\n-  //   }\n-  // });\n+// app.delete(\"/deleteTrail\", async function ({\n+//   req, res\n+// }: {\n+//   req: { id: string; }; res: any;\n+// }): Promise<void> {\n+//   try {\n+//     await trails.deleteOne({ $oid: req.id });\n+//     res.status = 201;\n+//     res.body = {\n+//       success: true,\n+//       msg: \"Trail deleted\",\n+//     };\n+//   } catch (err) {\n+//     res.body = {\n+//       success: false,\n+//       msg: err.toString(),\n+//     };\n+//   }\n+// });\n \n-  app.listen(\n-    { port: port ?? DEFAULT_PORT },\n-    () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n-  );\n-}\n+app.listen(\n+  { port: port ?? DEFAULT_PORT },\n+  () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n+);\n \n+\n"
                },
                {
                    "date": 1642841766889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n //   }\n // });\n \n app.listen(\n-  { port: port ?? DEFAULT_PORT },\n+  { port: port ? Number(port):DEFAULT_PORT },\n   () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n );\n \n \n"
                },
                {
                    "date": 1642841894581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,8 @@\n // });\n \n app.listen(\n   { port: port ? Number(port):DEFAULT_PORT },\n-  () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n+  () => console.log(`Server has started on http://localhost:${Number(port)} ðŸš€`),\n );\n \n \n"
                },
                {
                    "date": 1642841933059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n //   }\n // });\n \n app.listen(\n-  { port: port ? Number(port):DEFAULT_PORT },\n-  () => console.log(`Server has started on http://localhost:${Number(port)} ðŸš€`),\n+  { port: port ?? DEFAULT_PORT },\n+  () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n );\n \n \n"
                }
            ],
            "date": 1642500185400,
            "name": "Commit-0",
            "content": "// to run use the following cmd\n// deno run --allow-net --allow-read --allow-env app.ts\n\nimport { opine } from \"https://deno.land/x/opine@2.1.1/mod.ts\";\nimport { TrailService } from \"./TrailService.ts\";\nimport trails from \"./db.ts\";\nimport removeUndefined from \".helpers/removeUndefined.ts\";\n\nconst port = 3000;\n\nconst app = opine();\n\napp.get(\"/alltrails\", async function (req, res) {\n    res.send(await trails.find({}, { noCursorTimeout: false }).toArray())\n});\n\napp.get(\"/trailid/:trailid\", function (req, res) {\n    res.send(`trailid lautet: ${req.params.trailid}`);\n});\n\napp.get(\"/search\", async function (req, res) {\n    const trailService = new TrailService();\n    let searchQuery = trailService.findACoolTrail({ \n        trailId: req.query.trailid, \n        length: req.query.length, \n        title: req.query.title, \n        coordinates: req.query.coordinates });\n    searchQuery = removeUndefined(searchQuery);\n    console.log(searchQuery);\n    res.send(await trails.find({}, {noCursorTimeout: false }).toArray());\n    /* result \n    { trailId: undefined, length: \"2500\", title: undefined, coordinates: undefined }\n    mongo doesn't accept the undefined values\n    TODO: maybe write a function to reformat the string\n    */\n});\n\napp.set(\"/addTrail\", async function addTrail({\n    req, res,\n}: {\n    req: any;\n    res: any;\n}): Promise<void> {\n    try {\n        if (!req.hasBody) {\n            res.status = 400;\n            res.body = {\n                success: false,\n                msg: \"No Data\",\n            };\n        } else {\n            const body = await req.body();\n            const trail = await body.value;\n            await trails.insertOne(trail);\n            res.status = 201;\n            res.body = {\n                success: true,\n                data: trail,\n            };\n        }\n    } catch (err) {\n        res.body = {\n            success: false,\n            msg: err.toString(),\n        };\n    }\n});\n\napp.listen(\n    port,\n    () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n);"
        }
    ]
}