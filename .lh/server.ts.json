{
    "sourceFile": "server.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1643018782999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643018867703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Application } from \"https://deno.land/x/oak/mod.ts\";\n import router from \"./routes.ts\";\n \n-const PORT = Deno.env.get(\"PORT\") || '8080';\n+const PORT = Deno.env.get(\"PORT\");\n \n const app = new Application();\n \n app.use(router.routes());\n"
                },
                {
                    "date": 1643019537545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,12 @@\n import { Application } from \"https://deno.land/x/oak/mod.ts\";\n import router from \"./routes.ts\";\n+import { parse } from 'https://deno.land/std/flags/mod.ts';\n \n-const PORT = Deno.env.get(\"PORT\");\n+const { args } = Deno;\n+const DEFAULT_PORT = 8000;\n+const PORT = parse(args).port;\n+//const PORT : number  = +Deno.env.get(\"PORT\");\n \n const app = new Application();\n \n app.use(router.routes());\n"
                },
                {
                    "date": 1643020330675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,127 @@\n-import { Application } from \"https://deno.land/x/oak/mod.ts\";\n-import router from \"./routes.ts\";\n+// to run use the following cmd\n+// deno run --allow-net --allow-read --allow-env app.ts\n+import { opine } from \"https://deno.land/x/opine@2.1.1/mod.ts\";\n+import { TrailService } from \"./TrailService.ts\";\n+import trails from \"./db.ts\";\n+import removeUndefined from \"./helpers/removeUndefined.ts\";\n+import { Bson } from \"https://deno.land/x/bson/mod.ts\";\n+// for heroku\n+import { serve } from \"https://deno.land/std@0.122.0/http/server.ts\";\n import { parse } from 'https://deno.land/std/flags/mod.ts';\n \n const { args } = Deno;\n-const DEFAULT_PORT = 8000;\n-const PORT = parse(args).port;\n-//const PORT : number  = +Deno.env.get(\"PORT\");\n+const DEFAULT_PORT = 3000;\n \n-const app = new Application();\n+const port = parse(args).port;\n \n-app.use(router.routes());\n-app.use(router.allowedMethods());\n+const app = opine();\n \n-console.log(`Server started on Port:${PORT} ðŸš€`);\n \n-await app.listen({ port: PORT });\n+app.get(\"/welcome\", async function welcome(req, res) {\n+   res.send(\"Hello from the raptor-trails backend\")  \n+});\n+\n+// app.get(\"/trailid/:trailid\", async function ({\n+//   req,\n+//   res,\n+// }: {\n+//   req: { id: string };\n+//   res: any;\n+// }): Promise<void> {\n+\n+//   console.log(\"Das ist req\", req);\n+//   console.log(\"Das ist req.id\", req.id);\n+//   const trail = await trails.find({ \"_id\": new Bson.ObjectID(req.id) }, { noCursorTimeout: false }).toArray();\n+\n+//   if (trail) {\n+//     res.status = 200;\n+//     res.body = {\n+//       success: true,\n+//       data: trail,\n+//     };\n+//   } else {\n+//     res.status = 404;\n+//     res.body = {\n+//       success: false,\n+//       msg: \"No trail found\",\n+//     };\n+//   }\n+// });\n+\n+// app.get(\"/alltrails\", async function (req, res) {\n+//   res.send(await trails.find({}, { noCursorTimeout: false }).toArray())\n+// });\n+\n+// app.get(\"/search\", async function (req, res) {\n+//   const trailService = new TrailService();\n+//   let searchParameters = trailService.findACoolTrail({\n+//     trailId: req.query.trailid,\n+//     length: req.query.length,\n+//     title: req.query.title,\n+//     rating: req.query.rating,\n+//     coordinates: req.query.coordinates\n+//   });\n+//   let searchQuery = JSON.stringify(searchParameters);\n+//   console.log(searchQuery);\n+//   res.send(await trails.find({ searchQuery }, { noCursorTimeout: false }));\n+//   /* result \n+//   correct string is passed, but is not correctly formatted for search in Mongo\n+//   */\n+// });\n+\n+// app.set(\"/addTrail\", async ({\n+//   req, res,\n+// }: {\n+//   req: any; res: any;\n+// }): Promise<void> => {\n+//   try {\n+//     if (!req.hasBody) {\n+//       res.status = 400;\n+//       res.body = {\n+//         success: false,\n+//         msg: \"No Data\",\n+//       };\n+//     } else {\n+//       const body = await req.body();\n+//       const trail = await body.value;\n+//       await trails.insertOne(trail);\n+//       res.status = 201;\n+//       res.body = {\n+//         success: true,\n+//         data: trail,\n+//       };\n+//     }\n+//   } catch (err) {\n+//     res.body = {\n+//       success: false,\n+//       msg: err.toString(),\n+//     };\n+//   }\n+// });\n+\n+// app.delete(\"/deleteTrail\", async function ({\n+//   req, res\n+// }: {\n+//   req: { id: string; }; res: any;\n+// }): Promise<void> {\n+//   try {\n+//     await trails.deleteOne({ $oid: req.id });\n+//     res.status = 201;\n+//     res.body = {\n+//       success: true,\n+//       msg: \"Trail deleted\",\n+//     };\n+//   } catch (err) {\n+//     res.body = {\n+//       success: false,\n+//       msg: err.toString(),\n+//     };\n+//   }\n+// });\n+\n+app.listen(\n+  { port: port ?? DEFAULT_PORT },\n+  () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n+);\n+\n+\n"
                },
                {
                    "date": 1643020486995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n const { args } = Deno;\n const DEFAULT_PORT = 3000;\n \n-const port = parse(args).port;\n+const PORT = parse(args).port;\n \n const app = opine();\n \n \n@@ -47,11 +47,11 @@\n //     };\n //   }\n // });\n \n-// app.get(\"/alltrails\", async function (req, res) {\n-//   res.send(await trails.find({}, { noCursorTimeout: false }).toArray())\n-// });\n+app.get(\"/alltrails\", async function (req, res) {\n+  res.send(await trails.find({}, { noCursorTimeout: false }).toArray())\n+});\n \n // app.get(\"/search\", async function (req, res) {\n //   const trailService = new TrailService();\n //   let searchParameters = trailService.findACoolTrail({\n@@ -119,9 +119,9 @@\n //   }\n // });\n \n app.listen(\n-  { port: port ?? DEFAULT_PORT },\n-  () => console.log(`Server has started on http://localhost:${port} ðŸš€`),\n+  { port: PORT ?? DEFAULT_PORT },\n+  () => console.log(`Server has started on http://localhost:${PORT} ðŸš€`),\n );\n \n \n"
                },
                {
                    "date": 1643020535315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,37 +68,37 @@\n //   correct string is passed, but is not correctly formatted for search in Mongo\n //   */\n // });\n \n-// app.set(\"/addTrail\", async ({\n-//   req, res,\n-// }: {\n-//   req: any; res: any;\n-// }): Promise<void> => {\n-//   try {\n-//     if (!req.hasBody) {\n-//       res.status = 400;\n-//       res.body = {\n-//         success: false,\n-//         msg: \"No Data\",\n-//       };\n-//     } else {\n-//       const body = await req.body();\n-//       const trail = await body.value;\n-//       await trails.insertOne(trail);\n-//       res.status = 201;\n-//       res.body = {\n-//         success: true,\n-//         data: trail,\n-//       };\n-//     }\n-//   } catch (err) {\n-//     res.body = {\n-//       success: false,\n-//       msg: err.toString(),\n-//     };\n-//   }\n-// });\n+app.set(\"/addTrail\", async ({\n+  req, res,\n+}: {\n+  req: any; res: any;\n+}): Promise<void> => {\n+  try {\n+    if (!req.hasBody) {\n+      res.status = 400;\n+      res.body = {\n+        success: false,\n+        msg: \"No Data\",\n+      };\n+    } else {\n+      const body = await req.body();\n+      const trail = await body.value;\n+      await trails.insertOne(trail);\n+      res.status = 201;\n+      res.body = {\n+        success: true,\n+        data: trail,\n+      };\n+    }\n+  } catch (err) {\n+    res.body = {\n+      success: false,\n+      msg: err.toString(),\n+    };\n+  }\n+});\n \n // app.delete(\"/deleteTrail\", async function ({\n //   req, res\n // }: {\n"
                }
            ],
            "date": 1643018782999,
            "name": "Commit-0",
            "content": "import { Application } from \"https://deno.land/x/oak/mod.ts\";\nimport router from \"./routes.ts\";\n\nconst PORT = Deno.env.get(\"PORT\") || '8080';\n\nconst app = new Application();\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nconsole.log(`Server started on Port:${PORT} ðŸš€`);\n\nawait app.listen({ port: PORT });\n"
        }
    ]
}