{
    "sourceFile": "controllers/trails.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1643018135802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643018289491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,38 +30,23 @@\n     };\n   }\n };\n \n-async function searchTrail(params : any , response :any) {\n-  try {\n-    console.log(\"I'm in the try statement.\")\n-    const trailService = new TrailHelper()\n-    console.log('Created trailService')\n-    // const searchQuery = trailService.parseSearchKeys({ length: params.query.length, title: params.query.title, rating: params.query.rating })\n-    // console.log('Succesfully parsed searchKeys:')\n-    // console.log(searchQuery)\n-    const allTrails = await trails.find({\"title\" : \"testtrail\"}, { noCursorTimeout: false }).toArray();\n-    console.log('I searched for Trails and found this:')\n-    console.log(allTrails)\n-    if (allTrails) {\n-      response.status = 200;\n-      response.body = {\n-        success: true,\n-        data: allTrails,\n-      };\n-    } else {\n-      response.status = 500;\n-      response.body = {\n-        success: false,\n-        msg: \"Internal Server Error\",\n-      };\n-    }\n-  } catch (err) {\n-    response.body = {\n-      success: false,\n-      msg: err.toString(),\n-    };\n-  }\n+async function searchTrail(req: any, res: any) {\n+  const trailService = new TrailHelper();\n+  let searchParameters = trailService.parseSearchKeys({\n+    trailId: req.query.trailid,\n+    length: req.query.length,\n+    title: req.query.title,\n+    rating: req.query.rating,\n+    coordinates: req.query.coordinates\n+  });\n+  let searchQuery = JSON.stringify(searchParameters);\n+  console.log(searchQuery);\n+  res.send(await trails.find({ searchQuery }, { noCursorTimeout: false }));\n+  /* result \n+  correct string is passed, but is not correctly formatted for search in Mongo\n+  */\n };\n \n // @description: GET single trail\n // @route GET /api/trails/:id\n"
                }
            ],
            "date": 1643018135802,
            "name": "Commit-0",
            "content": "import trails from \"../db.ts\"\nimport { TrailHelper } from \"../helpers/TrailHelper.ts\";\nimport parseValue from \"../helpers/parse.ts\"\nimport { Bson } from \"https://deno.land/x/bson/mod.ts\"\n\n// @description: GET all Trails\n// @route GET /api/trails\nconst getTrails = async ({ response }: { response: any }) => {\n  try {\n    const allTrails = await trails.find({}, { noCursorTimeout: false }).toArray();\n    console.log(allTrails)\n    if (allTrails) {\n      response.status = 200;\n      response.body = allTrails\n      response.body = {\n        success: true,\n        data: allTrails,\n      };\n    } else {\n      response.status = 500;\n      response.body = {\n        success: false,\n        msg: \"Internal Server Error\",\n      };\n    }\n  } catch (err) {\n    response.body = {\n      success: false,\n      msg: err.toString(),\n    };\n  }\n};\n\nasync function searchTrail(params : any , response :any) {\n  try {\n    console.log(\"I'm in the try statement.\")\n    const trailService = new TrailHelper()\n    console.log('Created trailService')\n    // const searchQuery = trailService.parseSearchKeys({ length: params.query.length, title: params.query.title, rating: params.query.rating })\n    // console.log('Succesfully parsed searchKeys:')\n    // console.log(searchQuery)\n    const allTrails = await trails.find({\"title\" : \"testtrail\"}, { noCursorTimeout: false }).toArray();\n    console.log('I searched for Trails and found this:')\n    console.log(allTrails)\n    if (allTrails) {\n      response.status = 200;\n      response.body = {\n        success: true,\n        data: allTrails,\n      };\n    } else {\n      response.status = 500;\n      response.body = {\n        success: false,\n        msg: \"Internal Server Error\",\n      };\n    }\n  } catch (err) {\n    response.body = {\n      success: false,\n      msg: err.toString(),\n    };\n  }\n};\n\n// @description: GET single trail\n// @route GET /api/trails/:id\nconst getTrail = async ({\n  params,\n  response,\n}: {\n  params: { id: string };\n  response: any;\n}) => {\n\n  console.log(\"Das ist params\", params);\n  console.log(\"Das ist params.id\", params.id);\n  const trail = await trails.find({ \"_id\": new Bson.ObjectID(params.id) }, { noCursorTimeout: false }).toArray();\n\n  if (trail) {\n    response.status = 200;\n    response.body = {\n      success: true,\n      data: trail,\n    };\n  } else {\n    response.status = 404;\n    response.body = {\n      success: false,\n      msg: \"No trail found\",\n    };\n  }\n};\n\n// @description: GET search result for keys\n// @route GET /api/trails/searchKeys\n\n//old version of search trail, working with static parameters\n/*\nconst searchTrail = async ({\n  params,\n  response,\n}: {\n  params: any;\n  response: any;\n}) => {\n\n  //Version with manual parsing following this tutorial https://medium.com/deno-the-complete-reference/process-query-params-in-deno-6f71caa7933b\n  // const u = new URL(params.url);\n  // const po: Record<string, string | number | boolean> = {};\n\n  // for (const p of u.searchParams) {\n  //   po[p[0]] = parseValue(p[1]);\n  // }\n  // const searchQuery = JSON.stringify(po);\n\n  //Version nach ihrem Vorschlag\n  // const helper = new TrailHelper();\n  // response.send(params.query.title, params.query.length)\n  // console.log(params.query.title, params.query.length)\n  // const searchQuery = helper.parseSearchKeys({ title: params.query.title, length: params.query.length });\n\n  // response.send(searchQuery)\n\n  // const searchedTrails = await trails.find(searchQuery, { noCursorTimeout: false }).toArray();\n\n  //hard coded for test\n  const searchedTrails = await trails.find({title: \"testtrail\"}, { noCursorTimeout: false }).toArray();\n\n  if (searchedTrails) {\n    response.status = 200;\n    response.body = {\n      success: true,\n      data: searchedTrails,\n    };\n  } else {\n    response.status = 404;\n    response.body = {\n      success: false,\n      msg: \"No trails found\",\n    };\n  }\n};\n*/\n\n// @description: ADD single trail\n// @route POST /api/trails\nasync function addTrail({\n  request, response,\n}: {\n  request: any;\n  response: any;\n}): Promise<void> {\n  try {\n    if(!request.hasBody) {\n      response.status = 400;\n      response.body = {\n        success: false,\n        msg: \"No Data\",\n      };\n    } else {\n      const body = await request.body();\n      const trail = await body.value;\n      await trails.insertOne(trail);\n      response.status = 201;\n      response.body = {\n        success: true,\n        data: trail,\n      };\n    }\n  } catch(err) {\n    response.body = {\n      success: false,\n      msg: err.toString(),\n    };\n  }\n}\n\n// @description: UPDATE single trail\n// @route PUT /api/trails/:id\nconst updateTrail = async ({\n  params,\n  request,\n  response,\n}: {\n  params: { id: string };\n  request: any;\n  response: any;\n}) => {\n  try {\n    const body = await request.body();\n    const inputTrail = await body.value;\n    await trails.updateOne(\n      { trailID: params.id },\n      { $set: { title: inputTrail.title, length: inputTrail.length } }\n    );\n    const updatedTrail = await trails.findOne({ trailID: params.id });\n    response.status = 200;\n    response.body = {\n      success: true,\n      data: updatedTrail,\n    };\n  } catch (err) {\n    response.body = {\n      success: false,\n      msg: err.toString(),\n    };\n  }\n};\n\n// @description: DELETE single trail\n// @route DELETE /api/trails/:id\nconst deleteTrail = async ({\n  params,\n  response,\n}: {\n  params: { id: string };\n  request: any;\n  response: any;\n}) => {\n  try {\n    await trails.deleteOne({ trailID: params.id });\n    response.status = 201;\n    response.body = {\n      success: true,\n      msg: \"Product deleted\",\n    };\n  } catch (err) {\n    response.body = {\n      success: false,\n      msg: err.toString(),\n    };\n  }\n};\n\nexport { getTrails, getTrail, searchTrail, addTrail, updateTrail, deleteTrail };"
        }
    ]
}